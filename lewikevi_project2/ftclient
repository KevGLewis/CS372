#!/usr/bin/env python3
import socket
import sys
import argparse
import os.path
from socket import *

#---------------------------------------------------------------/
 # Author: Kevin Lewis
 # ONID: LewiKevi
 # Date: 08/10/2018
 # Description: Basic FTP client. Sends messages to the server to
 # Either request a file or get a list of the files on the server
 # completely.
#---------------------------------------------------------------/

# The base for the server is from https://medium.com/swlh/lets-write-a-chat-app-in-python-f6783a9ac170

PASSWORD = "&&&&&"
BUFSIZ = 1056

class UserCommands(object):
    clientAddress = ""
    clientPort = 0
    fileName = ""
    serverPort = 0

    def __init__(self, clientAddress, clientPort, fileName, serverPort):
        self.clientAddress = clientAddress
        self.clientPort = clientPort
        self.fileName = fileName
        self.serverPort = serverPort


class FTPController(object):
    def __init__(self, commands):
        self.commands = commands

    def ConnectToServer(self):
        self.client = ClientFTP(self.commands.clientAddress, self.commands.clientPort)
        return self.client.connection_setup()

    # Accepts a list from the server
    def AcceptList(self):
        if(self.client.verifyInput()):
            self.client.send_Message("Client accepting connections on " + str(self.commands.serverPort))
            self.server = ServerFTP(self.commands.serverPort)
            print("Receiving list from " + self.commands.clientAddress + ":" + str(self.commands.clientPort))
            msg = self.server.receive_Message()
            print(msg)

    # Accepts a file from the server
    def AcceptFile(self):
        if(self.client.verifyInput()):
            self.client.send_Message("Client accepting connections on " + str(self.commands.serverPort))
            self.server = ServerFTP(self.commands.serverPort)
            print("Receiving file " + self.commands.fileName + " from " + self.commands.clientAddress + ":" + str(self.commands.clientPort))
            msg = self.server.receive_Message()
            print("Transfer Complete")
            # Check if we have the same fileName https://stackoverflow.com/questions/82831/how-do-i-check-whether-a-file-exists?rq=1
            tempFileName = self.commands.fileName
            while os.path.isfile(tempFileName):
                tempFileName = "(Copy)" + tempFileName
                print("File already exists, file name changed to " + tempFileName)
            with open(tempFileName, "w") as text_file:
                text_file.write(msg)

    # Parses the command and sends the appropriate message to the server
    def SendCommandToServer(self):
        if(self.commands.fileName is not None):
            self.client.send_Message("-g " + self.commands.fileName + " " + str(self.commands.serverPort))
            self.AcceptFile()
        else:
            self.client.send_Message("-l " + str(self.commands.serverPort))
            self.AcceptList()

    # Closes both the client and server
    def close(self):
        self.server.close()
        self.client.close()


# Handles setting up the secondary FTP connection to send the file along on
class ServerFTP(object):
    def __init__(self, serverPort):
        self.serverSocket = socket(AF_INET, SOCK_STREAM)
        self.serverSocket.bind(('', serverPort))
        self.serverSocket.listen(1)
        self.accept_connections()

    def close(self):
        self.serverSocket.close()

    # accepts connections to the server
    def accept_connections(self):
        print("Waiting on Server")
        self.connectionSocket, client_address = self.serverSocket.accept()

    # General method to receive messages
    def receive_Message(self):
        msg = ""
        while not msg.endswith("@@"):
            msgBuffer = (self.connectionSocket.recv(BUFSIZ)).decode("utf8")
            msg += msgBuffer
        
        ## Ends with @@ so we'll need to trim the message
        msg = msg[:-2]
        return msg

# The client code is derived from the previous server code I wrote, and the class notes

# General class to connect to a server, in this case an FTP server
class ClientFTP(object):
    def __init__(self, clientAddress, clientPort):
        self.clientAddress = clientAddress
        self.clientPort = clientPort
        self.clientSocket = socket(AF_INET, SOCK_STREAM)
        self.clientSocket.connect((clientAddress, clientPort))

    def close(self):
        self.clientSocket.close()

    # Sets up the connection and sends a password to the server to verify we are not hostile
    def connection_setup(self):
        self.send_Message(PASSWORD)
        msg = self.receive_Message()
        if msg == "OK":
            print("Secure connection established")
            return True
        else:
            print("We Received " + msg)
            print("Error in establishing secure connection")
            return False

    # Just need to attach a @@ to the message, so the server knows when it can end the message
    def send_Message(self, msg):
        msg += "@@"
        self.clientSocket.send(bytes(msg, "utf8"))

    # Similar to sending, all messages will end with @@, so we know that they are complete
    def receive_Message(self):
        msg = ""
        while not msg.endswith("@@"):
            msgBuffer = (self.clientSocket.recv(BUFSIZ)).decode("utf8")
            msg += msgBuffer
        
        msg = msg[:-2]
        return msg

    # We need to verify that everything is ok with the server before setting up the client
    def verifyInput(self):
        msg = self.receive_Message()
        if msg == "OK":
            return True
        else:
            print(self.clientAddress + ":" + str(self.clientPort) + " says " + msg)
            return False

def parse_input():
    
    parser = argparse.ArgumentParser()
    parser.add_argument("serverAddress", action="store")
    parser.add_argument("serverPort", action="store", type=int )
    parser.add_argument("ftpServerPort", action="store", type=int)
    parser.add_argument("-l", help="request file list from server", dest="list_request", action="store_true")
    parser.add_argument("-g", help="request file from server USAGE: -g <FILENAME>", dest="fileName", type=str)
    
    args = parser.parse_args()
    
    fileName = ""
    if not args.list_request and args.fileName != None:
        fileName = args.fileName
    
    elif not args.list_request:
        return None

    return UserCommands(args.serverAddress, args.serverPort, args.fileName, args.ftpServerPort)

# Main function, gets the arguments from the command line
# and starts the server
if __name__ == "__main__":
    
    parsed_commands = parse_input()

    if parsed_commands != None:
        controller = FTPController(parsed_commands)
        if(controller.ConnectToServer()):
            controller.SendCommandToServer()

        controller.close()
    else:
        print("-l or -g argument required")
            